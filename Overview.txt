-Glewy File Overview and Dependancies

(Everything Here Ignores cstdlib and c++stdlib Headers)

                                        ---HEADERS---
-Dependancies
    SML
    GLEW
    SOIL

-Core
    abstraction.hpp [class GLFWWindow; class sml::vec2;]
    core.hpp (Core/*)
#   instance.hpp [class GLFWWindow; class Root;]
#   logging.hpp (macros)
    macros.hpp
    updateinfo.hpp [class GLFWwindow;]

-External
    external.hpp (External/*)
#   GLEW.h (GLEW)
#   GLFW.h (GLEW, GLFW)

-Rendering 
    material.hpp [typedef GLuint; class MaterialRenderable; class Camera;]
    materialrenderable.hpp [class Material;]
    rendering.hpp (Rendering/*)
    texture.hpp [typedef GLuint; typedef GLenum;]

-Scene (Core, Structures)
#   camera.hpp (transformable) [class sml::mat4;]
    component.hpp [struct UpdateInfo; class Entity;] {friend Entity;}
    entity.hpp (transformable) [class Root; class Component; struct UpdateInfo;]
    root.hpp [class Entity; class Transform; struct UpdateInfo; class Camera;]
    scene.hpp (Scene/*)
    transformable.hpp [class Transform;]

-Standard
    Shaders _dir_ |Contains Default Shaders|
#   sprite.hpp (component, materialrenderable) [typedef GLuint; class Texture; class Entity;]
    standard.hpp (Standard/*)

-Structures
    structures.hpp (Structures/*)
#   transform.hpp (SML, tree) {friend Transformable;}
    tree.hpp 

-Utilities 
    readfile.hpp
    util.hpp [class sml::vec2;]
    utilities.hpp (Utilities/*)

glewy.hpp (Glewy/*)

                                        ---SOURCES---

-Core
+   abstraction (SML, GLFW) 
+   instance (GLFW, abstraction, root, updateinfo, material)

-Rendering 
+   material (macros, SML, GLEW, materialrenderable, camera, readfile)
+   texture (SOIL, GLEW)

-Scene
+   camera (SML, transform)
    component
+   entity (component, transform)
+   root (entity, camera)
+   transformable (transform)

-Standard
+   sprite (SML, GLEW, material, texture, entity, transform)

-Structures
    tree
    transform

-Utilities (External)
+   util (SML/vec)
    readfile